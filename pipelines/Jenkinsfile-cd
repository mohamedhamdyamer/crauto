pipeline {
  agent {
    dockerfile {
      label 'crauto-cicd'
      dir 'cicd/images/jenkins-agent'
      args '--volume /home/amer/artifactory:/tmp/artifactory --volume /home/amer/deployments:/tmp/deployments'
    }
  }

  stages {
    stage('displaying info ...') {
      steps {
        script {
          def galaxyFile = readYaml(file: 'app/ansible/collection/galaxy.yml')
          def version = ""
          galaxyFile.each {
            key, value ->
              if (key == "version") {
                version = value
              }
          }
          println("Continuous Delivery - CD")
          println("Version: " + version)
          println("Build: ${BUILD_NUMBER}")
          println("Full version: " + version + ".Build.${BUILD_NUMBER}")
        }
      }
    }

    stage('preparing the deployment directory ...') {
      steps {
        sh '''
          #!/bin/bash
          mkdir /tmp/deployments/crauto.DEPLOY.$BUILD_NUMBER
        '''
      }
    }

    stage('copying the latest Ansible collection ...') {
      steps {
        sh '''
          #!/bin/bash
          my_version=`cat app/ansible/collection/galaxy.yml | grep -i version | awk '{print $2}'`
          cp /tmp/artifactory/crauto/ansible/collections/crauto-crauto-$my_version.tar.gz /tmp/deployments/crauto.DEPLOY.$BUILD_NUMBER
        '''
      }
    }
  }
}

node('crauto-cicd') {
  stage('cloning the repo ...') {
    checkout scm
  }

  stage('pulling the Docker images ...') {
    withCredentials([string(credentialsId: 'amer-docker-hub-password', variable: 'dockerHubPassword')]) {
      sh '''
        docker login --username mohamedhamdyamer --password ${dockerHubPassword}
        docker pull mohamedhamdyamer/crauto-app-jenkins-controller
        #docker pull mohamedhamdyamer/crauto-app-jenkins-agent
      '''
    }
  }

  stage('creating the required files to start the container ...') {
    sh '''
      echo FROM mohamedhamdyamer/crauto-app-jenkins-controller:latest > /home/amer/deployments/crauto/Dockerfile
      echo USER jenkins >> /home/amer/deployments/crauto/Dockerfile
      echo HEALTHCHECK NONE >> /home/amer/deployments/crauto/Dockerfile

      echo "---" > /home/amer/deployments/crauto/docker-compose.yml
      echo "services:" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "  crauto-app-jenkins-controller:" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "    build:" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "      context: ." >> /home/amer/deployments/crauto/docker-compose.yml
      echo "      dockerfile: Dockerfile" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "    image: mohamedhamdyamer/crauto-app-jenkins-controller:latest" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "    container_name: crauto-app-jenkins-controller" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "    hostname: crauto-app-jenkins-controller" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "    restart: on-failure" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "    environment:" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "      - Jenkins_URL=http://192.168.1.214:8081/" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "      - Docker_Host_URI=tcp://192.168.1.214:2375" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "      - Dockerized_Jenkins_Agent_Image_Name=mohamedhamdyamer/crauto-app-jenkins-agent:latest" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "      - Repo_URL=https://github.com/mohamedhamdyamer/crauto" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "    ports:" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "      - 8081:8080" >> /home/amer/deployments/crauto/docker-compose.yml
      echo "      - 50001:50000" >> /home/amer/deployments/crauto/docker-compose.yml
    '''
  }

  stage('building and running the ') {
    dir("/home/amer/deployments/crauto") {
      sh '''
        docker compose down
        docker compose build
        docker compose up --detach
      '''
    }
  }
}
